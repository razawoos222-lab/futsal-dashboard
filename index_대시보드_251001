<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JMFC Stats 2025</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8f9fa;
            color: #333;
            font-size: 24px; /* 18px + 3px */
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 25px; /* +5px */
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 35px; /* +5px */
            font-size: 40px; /* +5px */
            font-weight: 700;
        }

        /* 탭 네비게이션 */
        .tabs {
            display: flex;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            overflow: hidden;
        }

        .tab {
            flex: 1;
            padding: 20px 30px; /* +5px */
            text-align: center;
            background: #f8f9fa;
            border: none;
            cursor: pointer;
            font-size: 25px; /* +5px */
            font-weight: 600;
            color: #666;
            transition: all 0.3s ease;
            min-height: 54px; /* 44px + 10px for touch friendly */
        }

        .tab:hover {
            background: #e9ecef;
        }

        .tab.active {
            background: #007bff;
            color: white;
        }

        /* 컨텐츠 영역 */
        .content {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .tab-content {
            display: none;
            padding: 30px;
        }

        .tab-content.active {
            display: block;
        }

        /* 필터 영역 */
        .filters {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
            padding: 25px;
            background: #f8f9fa;
            border-radius: 12px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .filter-group label {
            font-weight: 600;
            color: #495057;
            font-size: 21px; /* 16px + 3px */
            margin-bottom: 12px; /* 8px에서 12px로 증가 */
            letter-spacing: 1.4px; /* 글자 간격 추가 */
        }

        select, input {
            padding: 12px 16px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            font-size: 20px;
            font-family: inherit;
            min-height: 44px;
            min-width: 200px;
        }

        select:focus, input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0,123,255,0.25);
        }

        button {
            padding: 12px 24px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 20px;
            font-weight: 600;
            min-height: 44px;
            transition: background-color 0.2s;
        }

        button:hover {
            background: #0056b3;
        }

        button:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

        /* 테이블 스타일 */
        .table-container {
            width: 100%;
            overflow-x: auto;
            margin-bottom: 30px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            position: relative;
        }

        .table-container::-webkit-scrollbar {
            height: 8px;
        }

        .table-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        .table-container::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }

        .table-container::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 22px;
            min-width: 1200px; /* 최소 너비 설정 */
        }

        th {
            background: #f8f9fa;
            padding: 16px 12px;
            min-width: 90px;
            text-align: left;
            font-weight: 700;
            color: #495057;
            border-bottom: 2px solid #dee2e6;
            position: sticky;
            top: 0;
            cursor: pointer;
            white-space: nowrap;
            user-select: none;
        }

        th:first-child {
            position: sticky;
            left: 0;
            z-index: 10;
            background: #e9ecef;
            min-width: 120px;
        }

        th:hover {
            background: #e9ecef;
        }

        th.sort-asc::after {
            content: ' ↑';
            color: #007bff;
        }

        th.sort-desc::after {
            content: ' ↓';
            color: #007bff;
        }

        td {
            padding: 14px 12px;
            min-width: 90px;
            border-bottom: 1px solid #dee2e6;
            white-space: nowrap;
        }

        td:first-child {
            position: sticky;
            left: 0;
            background: white;
            z-index: 5;
            font-weight: 600;
            min-width: 120px;
        }

        tr:nth-child(even) {
            background: #f8f9fa;
        }

        tr:nth-child(even) td:first-child {
            background: #f8f9fa;
        }

        tr:hover {
            background: #e3f2fd;
        }

        tr:hover td:first-child {
            background: #e3f2fd;
        }

        /* 페이지네이션 */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin: 30px 0;
            flex-wrap: wrap;
        }

        .pagination button {
            min-width: 44px;
            height: 44px;
            padding: 10px;
        }

        .pagination .current {
            background: #28a745;
        }

        /* 용어 정의 */
        .terminology {
            margin-top: 40px;
            padding: 25px;
            background: #f8f9fa;
            border-radius: 12px;
            border-left: 4px solid #007bff;
        }

        .terminology h3 {
            margin-bottom: 20px;
            color: #2c3e50;
            font-size: 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .terminology-content {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .term-item {
            display: flex;
            align-items: baseline;
            gap: 10px;
        }

        .term-name {
            font-weight: 700;
            color: #007bff;
            min-width: 60px;
        }

        .term-desc {
            color: #666;
            line-height: 1.4;
        }

        /* 로딩 상태 */
        .loading {
            text-align: center;
            padding: 60px;
            font-size: 18px;
            color: #666;
        }

        .error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }

        /* 반응형 디자인 */
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }

            .filters {
                flex-direction: column;
                gap: 15px;
            }

            .filter-group {
                width: 100%;
            }

            select, input {
                width: 100%;
                min-width: unset;
            }

            table {
                font-size: 14px;
            }

            th, td {
                padding: 12px 8px;
            }

            th:first-child, td:first-child {
                min-width: 100px;
            }
        }

        /* 접기/펼치기 아이콘 */
        .toggle-icon {
            transition: transform 0.3s ease;
        }

        .toggle-icon.collapsed {
            transform: rotate(-90deg);
        }

        /* 순위표 스타일 */
.summary-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 25px;
    margin-bottom: 40px;
}

.summary-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 30px;
    border-radius: 16px;
    text-align: center;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
}

.summary-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 15px 35px rgba(0,0,0,0.2);
}

.summary-card.mvp-card {
    background: linear-gradient(135deg, #ffd700 0%, #ffed4e 50%, #ffc107 100%);
    color: #8b4513;
    box-shadow: 0 8px 30px rgba(255, 215, 0, 0.4);
}

.summary-card.mvp-card:hover {
    box-shadow: 0 15px 40px rgba(255, 215, 0, 0.6);
}

.leaderboards-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 기존: repeat(auto-fit, minmax(320px, 1fr)) */
    gap: 30px;
    margin-bottom: 40px;
}

/* 포지션 완전 제거 */
.leader-position {
    display: none !important;
}

.leader-info .leader-position {
    display: none !important;
}

.leader-item .leader-position {
    display: none !important;
}

/* 분기 탭 모두 표시 */
.quarter-tabs {
    display: flex !important;
    padding: 20px;
    gap: 10px;
}

.quarter-tab {
    flex: 1;
    padding: 16px;
    border: 2px solid #e5e7eb;
    background: white;
    border-radius: 12px;
    cursor: pointer;
    font-size: 18px;
    font-weight: 700;
    transition: all 0.3s ease;
    opacity: 1 !important;
    visibility: visible !important;
}

.card-title {
    font-size: 20px;
    font-weight: 600;
    opacity: 0.9;
    margin-bottom: 15px;
}

.card-value {
    font-size: 36px;
    font-weight: 800;
    font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', sans-serif;
}

.leaderboards-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 30px;
    margin-bottom: 40px;
}

.leader-category {
    background: white;
    border-radius: 16px;
    padding: 30px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    border: 1px solid #f1f5f9;
}

.leader-category h3 {
    font-size: 27px;
    font-weight: 700;
    color: #1e293b;
    margin-bottom: 25px;
    text-align: center;
    border-bottom: 3px solid #3b82f6;
    padding-bottom: 15px;
}

.leader-list {
    margin-bottom: 25px;
}

.leader-item {
    display: flex;
    align-items: center;
    padding: 18px 0;
    border-bottom: 1px solid #f1f5f9;
    font-size: 23px;
}

.leader-item:last-child {
    border-bottom: none;
}

.leader-rank {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #e2e8f0;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 800;
    margin-right: 20px;
    font-size: 18px;
}

.leader-rank.first {
    background: linear-gradient(135deg, #ffd700, #ffed4e);
    color: #92400e;
}

.leader-rank.second {
    background: linear-gradient(135deg, #c0c0c0, #e5e7eb);
    color: #374151;
}

.leader-rank.third {
    background: linear-gradient(135deg, #cd7f32, #d97706);
    color: white;
}

.leader-info {
    flex: 1;
}

.leader-name {
    font-weight: 800;
    color: #1e293b;
    font-size: 25px;
}



.leader-stat {
    font-size: 25px;
    font-weight: 800;
    color: #3b82f6;
}



.leader-category button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
}

/* 모달 스타일 */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.6);
    backdrop-filter: blur(4px);
}

.modal-content {
    background-color: white;
    margin: 5% auto;
    padding: 0;
    border-radius: 20px;
    width: 90%;
    max-width: 700px;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 25px 50px rgba(0,0,0,0.25);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 30px;
    border-bottom: 1px solid #e5e7eb;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 20px 20px 0 0;
}

.modal-header h2 {
    margin: 0;
    font-size: 28px;
    font-weight: 800;
}

.close {
    color: white;
    font-size: 32px;
    font-weight: 900;
    cursor: pointer;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.2s;
}

.close:hover {
    background-color: rgba(255,255,255,0.2);
}

.quarter-tabs {
    display: flex;
    padding: 20px;
    gap: 10px;
}

.quarter-tab {
    flex: 1;
    padding: 16px;
    border: 2px solid #e5e7eb;
    background: white;
    border-radius: 12px;
    cursor: pointer;
    font-size: 18px;
    font-weight: 700;
    transition: all 0.3s ease;
}

.quarter-tab.active {
    background: #3b82f6;
    color: white;
    border-color: #3b82f6;
}

.ranking-list {
    padding: 20px 30px 30px;
}

/* 모바일 최적화 */
@media (max-width: 768px) {
    .summary-cards {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }
    
    .leaderboards-grid {
        grid-template-columns: 1fr;
        gap: 20px;
    }
    
    .card-value {
        font-size: 28px;
    }
    
    .modal-content {
        width: 95%;
        margin: 10% auto;
    }
}
    </style>
</head>
<body>
    <div class="container">
        <h1>JMFC Stats 2025</h1>

        <!-- 탭 네비게이션 -->
        <div class="tabs">
            <button class="tab active" onclick="switchTab('dashboard')">대시보드</button>
            <button class="tab" onclick="switchTab('leaderboards')">순위표</button>
            <button class="tab" onclick="switchTab('compare')">선수비교</button>
        </div>

        <!-- 대시보드 탭 -->
        <div class="content">
            <div id="dashboard" class="tab-content active">
                <!-- 필터 -->
                <div class="filters">
                    <div class="filter-group">
    <label for="periodFilter">기간</label>
    <select id="periodFilter">
        <option value="all">전체 시즌</option>
        <option value="latest">최근 경기</option>
    </select>
</div>
                    
                    <div class="filter-group" id="customDateGroup" style="display: none;">
                        <label for="startDate">시작일</label>
                        <input type="date" id="startDate">
                    </div>
                    
                    <div class="filter-group" id="customDateGroup2" style="display: none;">
                        <label for="endDate">종료일</label>
                        <input type="date" id="endDate">
                    </div>

                    <div class="filter-group">
                        <label for="playerFilter">선수 검색</label>
                        <input type="text" id="playerFilter" placeholder="선수 이름으로 검색...">
                    </div>

                    <div class="filter-group">
                        <label for="positionFilter">포지션</label>
                        <select id="positionFilter">
                            <option value="all">전체</option>  
                            <option value="피보">피보</option>
                            <option value="올라운더">올라운더</option>
                            <option value="픽소">픽소</option>
                            <option value="아라">아라</option>
                        </select>
                    </div>

                    <div class="filter-group">
                        <label>&nbsp;</label>
                        <button onclick="Dashboard.applyFilters()">필터 적용</button>
                    </div>
                </div>

                <!-- 선수 통계 테이블 -->
                <div class="table-container">
                    <table id="playersTable">
                        <thead>
                            <tr>
                                <th onclick="Dashboard.sortTable('name')">이름</th>
                                <th onclick="Dashboard.sortTable('position')">포지션</th>
                                <th onclick="Dashboard.sortTable('games')">경기수</th>
                                <th onclick="Dashboard.sortTable('wins')">승</th>
                                <th onclick="Dashboard.sortTable('draws')">무</th>
                                <th onclick="Dashboard.sortTable('losses')">패</th>
                                <th onclick="Dashboard.sortTable('goals')">득점</th>
                                <th onclick="Dashboard.sortTable('assists')">도움</th>
                                <th onclick="Dashboard.sortTable('defenses')">수비</th>
                                <th onclick="Dashboard.sortTable('saves')">선방</th>
                                <th onclick="Dashboard.sortTable('winRate')">승률</th>
                                <th onclick="Dashboard.sortTable('ccp')">CCP</th>
                                <th onclick="Dashboard.sortTable('points')">승점</th>
                                <th onclick="Dashboard.sortTable('attackPoints')">공격P</th>
                                <th onclick="Dashboard.sortTable('defensePoints')">수비P</th>
                                <th onclick="Dashboard.sortTable('mp')">MP</th>
                                <th onclick="Dashboard.sortTable('mpPerGame')">MP/G</th>
                                <th onclick="Dashboard.sortTable('goalsPerGame')">득점/G</th>
                                <th onclick="Dashboard.sortTable('assistsPerGame')">도움/G</th>
                            </tr>
                        </thead>
                        <tbody id="playersTableBody">
                            <tr>
                                <td colspan="19" class="loading">데이터를 불러오는 중...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- 페이지네이션 -->
                <div class="pagination" id="pagination"></div>

                <!-- 용어 정의 -->
                <div class="terminology">
                    <h3 onclick="toggleTerminology()">
                        <span class="toggle-icon">▼</span>
                        용어 정의
                    </h3>
                    <div class="terminology-content" id="terminologyContent">
                        <div class="term-item">
                            <span class="term-name">CCP</span>
                            <span class="term-desc">Comprehensive Contribution Points (종합기여도) = 승점 + MP</span>
                        </div>
                        <div class="term-item">
                            <span class="term-name">MP</span>
                            <span class="term-desc">Match Points (경기포인트) = (득점 + 도움) × 2 + (수비 + 선방) × 1</span>
                        </div>
                        <div class="term-item">
                            <span class="term-name">승점</span>
                            <span class="term-desc">승리 3점, 무승부 1점, 패배 0점</span>
                        </div>
                        <div class="term-item">
                            <span class="term-name">공격포인트</span>
                            <span class="term-desc">득점 + 도움 합계</span>
                        </div>
                        <div class="term-item">
                            <span class="term-name">수비포인트</span>
                            <span class="term-desc">수비 + 선방 합계</span>
                        </div>
                        <div class="term-item">
                            <span class="term-name">MP/G</span>
                            <span class="term-desc">경기당 MP (MP ÷ 경기수)</span>
                        </div>
                        <div class="term-item">
                            <span class="term-name">승률</span>
                            <span class="term-desc">(승리수 ÷ 경기수) × 100</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 순위표 탭 -->
            <div id="leaderboards" class="tab-content">
    <!-- 요약 카드 -->
    <div class="summary-cards">
        <div class="summary-card">
            <div class="card-title">총 경기수</div>
            <div class="card-value" id="totalMatches">-</div>
        </div>
        <div class="summary-card">
            <div class="card-title">등록 선수</div>
            <div class="card-value" id="totalPlayers">-</div>
        </div>
        <div class="summary-card">
            <div class="card-title">총 득점</div>
            <div class="card-value" id="totalGoals">-</div>
        </div>
        <div class="summary-card">
            <div class="card-title">시즌 MVP</div>
            <div class="card-value" id="currentMVP">-</div>
        </div>
    </div>

    <!-- 순위표 그리드 -->
    <div class="leaderboards-grid">
        <div class="leader-category">
            <h3>득점순위</h3>
            <div class="leader-list" id="goals-leaders"></div>
            <button onclick="showCompleteLeaders('goals')">Complete Leaders</button>
        </div>
        <div class="leader-category">
            <h3>도움순위</h3>
            <div class="leader-list" id="assists-leaders"></div>
            <button onclick="showCompleteLeaders('assists')">Complete Leaders</button>
        </div>
        <div class="leader-category">
            <h3>공격포인트순위</h3>
            <div class="leader-list" id="attack-leaders"></div>
            <button onclick="showCompleteLeaders('attack')">Complete Leaders</button>
        </div>
        <div class="leader-category">
            <h3>수비순위</h3>
            <div class="leader-list" id="defenses-leaders"></div>
            <button onclick="showCompleteLeaders('defenses')">Complete Leaders</button>
        </div>
        <div class="leader-category">
            <h3>선방순위</h3>
            <div class="leader-list" id="saves-leaders"></div>
            <button onclick="showCompleteLeaders('saves')">Complete Leaders</button>
        </div>
        <div class="leader-category">
            <h3>수비포인트순위</h3>
            <div class="leader-list" id="defensePoints-leaders"></div>
            <button onclick="showCompleteLeaders('defensePoints')">Complete Leaders</button>
        </div>
        <div class="leader-category">
            <h3>CCP순위</h3>
            <div class="leader-list" id="ccp-leaders"></div>
            <button onclick="showCompleteLeaders('ccp')">Complete Leaders</button>
        </div>
        <div class="leader-category">
            <h3>승률순위</h3>
            <div class="leader-list" id="winrate-leaders"></div>
            <button onclick="showCompleteLeaders('winrate')">Complete Leaders</button>
        </div>
        <div class="leader-category">
            <h3>승점순위</h3>
            <div class="leader-list" id="points-leaders"></div>
            <button onclick="showCompleteLeaders('points')">Complete Leaders</button>
        </div>
    </div>

    <!-- MVP 모달 -->
    <div id="mvpModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>분기별 MVP</h2>
                <span class="close" onclick="closeMVPModal()">&times;</span>
            </div>
            <div class="quarter-tabs">
                <button class="quarter-tab active" onclick="switchQuarter('Q1')">Q1</button>
                <button class="quarter-tab" onclick="switchQuarter('Q2')">Q2</button>
                <button class="quarter-tab" onclick="switchQuarter('Q3')">Q3</button>
                <button class="quarter-tab" onclick="switchQuarter('Q4')">Q4</button>
            </div>
            <div id="mvp-ranking-list" class="ranking-list"></div>
        </div>
    </div>

    <!-- Complete Leaders 모달 -->
    <div id="completeModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="complete-modal-title">전체 순위</h2>
                <span class="close" onclick="closeCompleteModal()">&times;</span>
            </div>
            <div id="complete-ranking-list" class="ranking-list"></div>
        </div>
    </div>
</div>

            <!-- 선수비교 탭 -->
            <div id="compare" class="tab-content">
                <div class="loading">선수비교 기능을 준비 중입니다...</div>
            </div>
        </div>
    </div>

    <script>
        // 전역 변수
        let playersData = [];
        let filteredData = [];
        let currentSort = { column: '', direction: 'asc' };
        let currentPage = 1;
        const itemsPerPage = 15;

        // 탭 전환
        function switchTab(tabName) {
            // 모든 탭과 컨텐츠 비활성화
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // 선택된 탭과 컨텐츠 활성화
            document.querySelector(`[onclick*="${tabName}"]`).classList.add('active');
            document.getElementById(tabName).classList.add('active');
        }

        // 용어 정의 토글
        function toggleTerminology() {
            const content = document.getElementById('terminologyContent');
            const icon = document.querySelector('.toggle-icon');
            
            if (content.style.display === 'none') {
                content.style.display = 'flex';
                icon.classList.remove('collapsed');
            } else {
                content.style.display = 'none';
                icon.classList.add('collapsed');
            }
        }

        // 대시보드 모듈
        const Dashboard = {
            init() {
                this.loadData();
                this.setupFilters();
            },

            async loadData() {
    try {
        google.script.run
            .withSuccessHandler((data) => {
                playersData = data;
                filteredData = [...playersData];
                this.renderTable();
                this.renderPagination();
            })
            .withFailureHandler((error) => {
                console.error('데이터 로딩 실패:', error);
                playersData = this.generateSampleData();
                filteredData = [...playersData];
                this.renderTable();
                this.renderPagination();
            })
            .getDashboardData();
    } catch (error) {
        console.error('데이터 로딩 실패:', error);
    }
},
            generateSampleData() {
                // 샘플 데이터 생성 (실제 Google Sheets 연동 시 제거)
                const positions = ['GK', 'DF', 'MF', 'FW'];
                const names = ['김철수', '이영희', '박민수', '정소영', '최준호', '한지민', '강대성', '윤서현', '임태윤', '조은비'];
                
                return names.map((name, index) => {
                    const games = Math.floor(Math.random() * 20) + 5;
                    const wins = Math.floor(Math.random() * games * 0.7);
                    const losses = Math.floor(Math.random() * (games - wins));
                    const draws = games - wins - losses;
                    const goals = Math.floor(Math.random() * 15);
                    const assists = Math.floor(Math.random() * 10);
                    const defenses = Math.floor(Math.random() * 8);
                    const saves = Math.floor(Math.random() * 5);
                    const attackPoints = goals + assists;
                    const defensePoints = defenses + saves;
                    const mp = (goals + assists) * 2 + (defenses + saves) * 1;
                    const points = wins * 3 + draws * 1;
                    const ccp = points + mp;
                    
                    return {
                        name,
                        position: positions[index % positions.length],
                        games,
                        wins,
                        draws,
                        losses,
                        goals,
                        assists,
                        defenses,
                        saves,
                        winRate: games > 0 ? ((wins / games) * 100).toFixed(1) : '0.0',
                        ccp,
                        points,
                        attackPoints,
                        defensePoints,
                        mp,
                        mpPerGame: games > 0 ? (mp / games).toFixed(2) : '0.00',
                        goalsPerGame: games > 0 ? (goals / games).toFixed(2) : '0.00',
                        assistsPerGame: games > 0 ? (assists / games).toFixed(2) : '0.00'
                    };
                });
            },

            setupFilters() {
                const periodFilter = document.getElementById('periodFilter');
                periodFilter.addEventListener('change', () => {
                    const customGroups = document.querySelectorAll('#customDateGroup, #customDateGroup2');
                    if (periodFilter.value === 'custom') {
                        customGroups.forEach(group => group.style.display = 'flex');
                    } else {
                        customGroups.forEach(group => group.style.display = 'none');
                    }
                });

                const playerFilter = document.getElementById('playerFilter');
                playerFilter.addEventListener('input', () => {
                    this.applyFilters();
                });
            },

            async applyFilters() {
    const periodFilter = document.getElementById('periodFilter').value;
    const playerName = document.getElementById('playerFilter').value.toLowerCase();
    const position = document.getElementById('positionFilter').value;
    
    try {
        if (periodFilter === 'all') {
            // 전체 시즌 - 기존 방식
            google.script.run
                .withSuccessHandler((data) => {
                    playersData = data;
                    this.filterAndRender(playerName, position);
                })
                .withFailureHandler((error) => {
                    console.error('데이터 로딩 실패:', error);
                })
                .getDashboardData();
        } else if (periodFilter === 'latest') {
            // 최근 경기
            google.script.run
                .withSuccessHandler((data) => {
                    playersData = data;
                    this.filterAndRender(playerName, position);
                })
                .withFailureHandler((error) => {
                    console.error('데이터 로딩 실패:', error);
                })
                .getLatestGameData();
        }
    } catch (error) {
        console.error('필터 적용 실패:', error);
    }
},

filterAndRender(playerName, position) {
    filteredData = playersData.filter(player => {
        const nameMatch = player.name.toLowerCase().includes(playerName);
        const positionMatch = position === 'all' || player.position === position;
        return nameMatch && positionMatch;
    });
    
    currentPage = 1;
    this.renderTable();
    this.renderPagination();
},

            sortTable(column) {
                const headers = document.querySelectorAll('th');
                headers.forEach(h => h.classList.remove('sort-asc', 'sort-desc'));
                
                if (currentSort.column === column) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort.column = column;
                    currentSort.direction = 'desc';
                }

                filteredData.sort((a, b) => {
                    let aVal = a[column];
                    let bVal = b[column];
                    
                    // 숫자 값 처리
                    if (typeof aVal === 'string' && !isNaN(parseFloat(aVal))) {
                        aVal = parseFloat(aVal);
                        bVal = parseFloat(bVal);
                    }
                    
                    if (currentSort.direction === 'asc') {
                        return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
                    } else {
                        return aVal < bVal ? 1 : aVal > bVal ? -1 : 0;
                    }
                });

                // 헤더에 정렬 표시
                const targetHeader = Array.from(headers).find(h => 
                    h.getAttribute('onclick').includes(column)
                );
                if (targetHeader) {
                    targetHeader.classList.add(currentSort.direction === 'asc' ? 'sort-asc' : 'sort-desc');
                }

                this.renderTable();
            },

            renderTable() {
                const tbody = document.getElementById('playersTableBody');
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const pageData = filteredData.slice(startIndex, endIndex);

                if (pageData.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="19" style="text-align: center; color: #666;">데이터가 없습니다.</td></tr>';
                    return;
                }

                tbody.innerHTML = pageData.map(player => `
                    <tr>
                        <td>${player.name}</td>
                        <td>${player.position}</td>
                        <td>${player.games}</td>
                        <td>${player.wins}</td>
                        <td>${player.draws}</td>
                        <td>${player.losses}</td>
                        <td>${player.goals}</td>
                        <td>${player.assists}</td>
                        <td>${player.defenses}</td>
                        <td>${player.saves}</td>
                        <td>${(parseFloat(player.winRate) * 100).toFixed(2)}%</td>
                        <td>${player.ccp}</td>
                        <td>${player.points}</td>
                        <td>${player.attackPoints}</td>
                        <td>${player.defensePoints}</td>
                        <td>${player.mp}</td>
                        <td>${parseFloat(player.mpPerGame).toFixed(2)}</td>
                        <td>${parseFloat(player.goalsPerGame).toFixed(2)}</td>
                        <td>${parseFloat(player.assistsPerGame).toFixed(2)}</td>
                   </tr>
             `).join('');
            },

            renderPagination() {
                const pagination = document.getElementById('pagination');
                const totalPages = Math.ceil(filteredData.length / itemsPerPage);
                
                if (totalPages <= 1) {
                    pagination.innerHTML = '';
                    return;
                }

                let paginationHTML = '';
                
                // 이전 버튼
                if (currentPage > 1) {
                    paginationHTML += `<button onclick="Dashboard.changePage(${currentPage - 1})">이전</button>`;
                }

                // 페이지 번호들
                const startPage = Math.max(1, currentPage - 2);
                const endPage = Math.min(totalPages, currentPage + 2);

                for (let i = startPage; i <= endPage; i++) {
                    const className = i === currentPage ? 'current' : '';
                    paginationHTML += `<button class="${className}" onclick="Dashboard.changePage(${i})">${i}</button>`;
                }

                // 다음 버튼
                if (currentPage < totalPages) {
                    paginationHTML += `<button onclick="Dashboard.changePage(${currentPage + 1})">다음</button>`;
                }

                pagination.innerHTML = paginationHTML;
            },

            changePage(page) {
                currentPage = page;
                this.renderTable();
                this.renderPagination();
                
                // 테이블 상단으로 스크롤
                document.querySelector('.table-container').scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'start' 
                });
            }
        };

      const Leaderboards = {
    init() {
        this.loadData();
    },
    
    async loadData() {
        try {
            // 요약 통계 로드
            google.script.run
                .withSuccessHandler((data) => {
                    this.renderSummaryCards(data);
                })
                .withFailureHandler((error) => {
                    console.error('요약 통계 로딩 실패:', error);
                    this.renderSummaryCards({
                        totalMatches: 156,
                        totalPlayers: 18,
                        totalGoals: 324,
                        mvp: '김기호'
                    });
                })
                .getSummaryStats();

            // 순위표 데이터 로드
            google.script.run
                .withSuccessHandler((data) => {
                    this.renderLeaderboards(data);
                })
                .withFailureHandler((error) => {
                    console.error('순위표 로딩 실패:', error);
                    this.loadSampleData();
                })
                .getLeaderboardsData();
        } catch (error) {
            console.error('데이터 로딩 실패:', error);
            this.loadSampleData();
        }
    },

    renderSummaryCards(data) {
        document.getElementById('totalMatches').textContent = data.totalMatches || 0;
        document.getElementById('totalPlayers').textContent = data.totalPlayers || 0;
        document.getElementById('totalGoals').textContent = data.totalGoals || 0;
        document.getElementById('currentMVP').textContent = data.mvp || '-';
    },

    renderLeaderboards(data) {
        const categories = ['goals', 'assists', 'attack', 'defenses', 'saves', 'defensePoints', 'ccp', 'winrate', 'points'];
        
        categories.forEach(category => {
            const leaders = data[category] || [];
            this.renderLeaderCategory(category, leaders.slice(0, 5));
        });
    },

    renderLeaderCategory(category, leaders) {
        const container = document.getElementById(`${category}-leaders`);
        if (!container) return;

        container.innerHTML = leaders.map((leader, index) => {
            const rankClass = index === 0 ? 'first' : index === 1 ? 'second' : index === 2 ? 'third' : '';
            let statValue;
            
            switch(category) {
                case 'winrate':
                    statValue = `${(leader.winRate * 100).toFixed(1)}%`;
                    break;
                case 'attack':
                    statValue = leader.attackPoints;
                    break;
                case 'defensePoints':
                    statValue = leader.defensePoints;
                    break;
                default:
                    statValue = leader[category];
            }
            
            return `
                <div class="leader-item">
                    <div class="leader-rank ${rankClass}">${index + 1}</div>
                    <div class="leader-info">
                        <div class="leader-name">${leader.name}</div>
                    </div>
                    <div class="leader-stat">${statValue}</div>
                </div>
            `;
        }).join('');
    },

    loadSampleData() {
        const sampleSummary = {
            totalMatches: 156,
            totalPlayers: 18,
            totalGoals: 324,
            mvp: '김기호'
        };

        const sampleLeaders = {
            goals: [
                {name: '김기호', goals: 15},
                {name: '이영민', goals: 12},
                {name: '박준석', goals: 11},
                {name: '최도현', goals: 9},
                {name: '정우성', goals: 8}
            ],
            assists: [
                {name: '이영민', assists: 8},
                {name: '김태윤', assists: 7},
                {name: '박준석', assists: 6},
                {name: '최도현', assists: 5},
                {name: '김기호', assists: 4}
            ],
            attack: [
                {name: '김기호', attackPoints: 19},
                {name: '이영민', attackPoints: 20},
                {name: '박준석', attackPoints: 17},
                {name: '최도현', attackPoints: 14},
                {name: '김태윤', attackPoints: 12}
            ],
            defenses: [
                {name: '김동현', defenses: 12},
                {name: '이승호', defenses: 10},
                {name: '박성민', defenses: 9},
                {name: '최영훈', defenses: 7},
                {name: '정민수', defenses: 6}
            ],
            saves: [
                {name: '김수호', saves: 25},
                {name: '이정민', saves: 18},
                {name: '박현우', saves: 12},
                {name: '최준영', saves: 5},
                {name: '김동현', saves: 3}
            ],
            defensePoints: [
                {name: '김수호', defensePoints: 28},
                {name: '김동현', defensePoints: 15},
                {name: '이정민', defensePoints: 18},
                {name: '박성민', defensePoints: 12},
                {name: '최영훈', defensePoints: 10}
            ],
            ccp: [
                {name: '김기호', ccp: 95},
                {name: '이영민', ccp: 88},
                {name: '박준석', ccp: 79},
                {name: '김수호', ccp: 72},
                {name: '최도현', ccp: 69}
            ],
            winrate: [
                {name: '김기호', winRate: 0.857},
                {name: '이영민', winRate: 0.824},
                {name: '박준석', winRate: 0.789},
                {name: '김수호', winRate: 0.763},
                {name: '최도현', winRate: 0.741}
            ],
            points: [
                {name: '김기호', points: 76},
                {name: '이영민', points: 68},
                {name: '박준석', points: 62},
                {name: '김수호', points: 44},
                {name: '최도현', points: 41}
            ]
        };

        this.renderSummaryCards(sampleSummary);
        this.renderLeaderboards(sampleLeaders);
    }
};

// 모달 함수들도 수정
function showMVPModal() {
    document.getElementById('mvpModal').style.display = 'block';
    loadMVPRanking('Q1');
    loadMVPRanking('Q2');
    loadMVPRanking('Q3');
    loadMVPRanking('Q4');
}

function switchQuarter(quarter) {
    document.querySelectorAll('.quarter-tab').forEach(tab => tab.classList.remove('active'));
    event.target.classList.add('active');
    loadMVPRanking(quarter);
}

function loadMVPRanking(quarter) {
    const ccpData = {
        Q1: [
            {name: '이영민', ccp: 82},
            {name: '김기호', ccp: 78},
            {name: '박준석', ccp: 74},
            {name: '김수호', ccp: 69},
            {name: '최도현', ccp: 65}
        ],
        Q2: [
            {name: '김기호', ccp: 89},
            {name: '이영민', ccp: 85},
            {name: '박준석', ccp: 76},
            {name: '김동현', ccp: 71},
            {name: '김수호', ccp: 68}
        ],
        Q3: [
            {name: '김기호', ccp: 95},
            {name: '이영민', ccp: 88},
            {name: '박준석', ccp: 79},
            {name: '김수호', ccp: 72},
            {name: '최도현', ccp: 69}
        ],
        Q4: [
            {name: '데이터 없음', ccp: 0}
        ]
    };

    const container = document.getElementById('mvp-ranking-list');
    const data = ccpData[quarter] || [];

    if (data[0].name === '데이터 없음') {
        container.innerHTML = '<p style="text-align: center; color: #6b7280; padding: 20px;">아직 데이터가 없습니다.</p>';
        return;
    }

    container.innerHTML = data.map((player, index) => {
        const rankClass = index === 0 ? 'first' : index === 1 ? 'second' : index === 2 ? 'third' : '';
        return `
            <div class="leader-item">
                <div class="leader-rank ${rankClass}">${index + 1}</div>
                <div class="leader-info">
                    <div class="leader-name">${player.name}</div>
                </div>
                <div class="leader-stat">${player.ccp}</div>
            </div>
        `;
    }).join('');
}

        function showCompleteLeaders(category) {
    const titles = {
        goals: '득점 전체 순위',
        assists: '도움 전체 순위',
        attack: '공격포인트 전체 순위',
        defenses: '수비 전체 순위',
        saves: '선방 전체 순위',
        defensePoints: '수비포인트 전체 순위',
        ccp: 'CCP 전체 순위',
        winrate: '승률 전체 순위',
        points: '승점 전체 순위'
    };

    document.getElementById('complete-modal-title').textContent = titles[category];
    document.getElementById('completeModal').style.display = 'block';
    
    loadCompleteRanking(category);
}

function loadCompleteRanking(category) {
    const container = document.getElementById('complete-ranking-list');
    container.innerHTML = '<p style="text-align: center; color: #6b7280; padding: 20px;">전체 순위를 불러오는 중...</p>';
    
    // 서버에서 직접 데이터 요청
    google.script.run
        .withSuccessHandler((data) => {
            const leaders = data[category] || [];
            const top10 = leaders.slice(0, 10); // 10명 추출
            
            if (top10.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #6b7280; padding: 20px;">데이터를 불러올 수 없습니다.</p>';
                return;
            }
            
            container.innerHTML = top10.map((leader, index) => {
                const rankClass = index === 0 ? 'first' : index === 1 ? 'second' : index === 2 ? 'third' : '';
                let statValue;
                
                switch(category) {
                    case 'winrate':
                        statValue = `${(leader.winRate * 100).toFixed(1)}%`;
                        break;
                    case 'attack':
                        statValue = leader.attackPoints;
                        break;
                    case 'defensePoints':
                        statValue = leader.defensePoints;
                        break;
                    default:
                        statValue = leader[category];
                }
                
                return `
                    <div class="leader-item">
                        <div class="leader-rank ${rankClass}">${index + 1}</div>
                        <div class="leader-info">
                            <div class="leader-name">${leader.name}</div>
                        </div>
                        <div class="leader-stat">${statValue}</div>
                    </div>
                `;
            }).join('');
        })
        .withFailureHandler((error) => {
            console.error('데이터 로딩 실패:', error);
            container.innerHTML = '<p style="text-align: center; color: #dc2626; padding: 20px;">데이터 로딩 중 오류가 발생했습니다.</p>';
        })
        .getLeaderboardsData(); // 서버에서 전체 데이터 다시 요청
}


        function closeCompleteModal() {
            document.getElementById('completeModal').style.display = 'none';
        }

        // 모달 외부 클릭시 닫기
        window.onclick = function(event) {
            const mvpModal = document.getElementById('mvpModal');
            const completeModal = document.getElementById('completeModal');
            
            if (event.target === mvpModal) {
                closeMVPModal();
            }
            if (event.target === completeModal) {
                closeCompleteModal();
            }
        };

 

        // 페이지 로드 시 초기화
        document.addEventListener('DOMContentLoaded', () => {
            Dashboard.init();
            Leaderboards.init();
            Compare.init();
        });
    </script>
</body>
</html>
