// ==========================================
// CODE.GS - 풋살 통계 대시보드 서버 코드 (스프레드시트 연결형)
// ==========================================

function doGet() {
  return HtmlService.createHtmlOutputFromFile('index')
    .setTitle('JMFC Stats 2025')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}


// 현재 getDashboardData() 함수를 완전히 교체
function getDashboardData() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const playersSheet = ss.getSheetByName('선수별능력치');
    
    if (!playersSheet) {
      throw new Error('선수별능력치 시트를 찾을 수 없습니다.');
    }
    
    const range = playersSheet.getRange(2, 1, playersSheet.getLastRow() - 1, 20);
    const values = range.getValues();
    
    const players = values.map(row => ({
      name: row[0] || '',           // A열: 이름
      position: row[1] || '',       // B열: 포지션  
      games: row[5] || 0,           // F열: 경기수
      wins: row[6] || 0,            // G열: 승
      draws: row[7] || 0,           // H열: 무
      losses: row[8] || 0,          // I열: 패
      goals: row[9] || 0,           // J열: 득점
      assists: row[10] || 0,        // K열: 도움
      defenses: row[11] || 0,       // L열: 수비
      saves: row[12] || 0,          // M열: 선방
      winRate: row[13] || '0.00%',  // N열: 승률
      ccp: row[14] || 0,            // O열: CCP
      points: row[15] || 0,         // P열: 승점
      attackPoints: row[16] || 0,   // Q열: 공격포인트
      defensePoints: row[17] || 0,  // R열: 수비포인트
      mp: row[18] || 0,             // S열: MP
      mpPerGame: row[19] || 0,      // T열: MP/G
      goalsPerGame: row[5] > 0 ? (row[9] / row[5]).toFixed(2) : '0.00',
      assistsPerGame: row[5] > 0 ? (row[10] / row[5]).toFixed(2) : '0.00'
    })).filter(player => player.name);
    
    return players;
  } catch (error) {
    Logger.log('getDashboardData 오류: ' + error.toString());
    throw error;
  }
}


function getLatestGameData() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const recordSheet = ss.getSheetByName('기록실_개인기록');
    
    if (!recordSheet) {
      throw new Error('기록실_개인기록 시트를 찾을 수 없습니다.');
    }
    
    const range = recordSheet.getRange(2, 1, recordSheet.getLastRow() - 1, 18);
    const values = range.getValues();
    
    // null/빈 값 제거
    const validRows = values.filter(row => row[0] && row[1]);
    
    if (validRows.length === 0) {
      return [];
    }
    
    // 모든 날짜 수집하고 최신 날짜 찾기
    const allDates = validRows.map(row => new Date(row[0]));
    const latestDate = new Date(Math.max(...allDates));
    
    // 최신 날짜 데이터만 필터링
    const latestGameData = validRows.filter(row => {
      const gameDate = new Date(row[0]);
      return gameDate.getTime() === latestDate.getTime();
    });
    
    // 기존 형태로 변환
    const players = latestGameData.map(row => ({
      name: row[1] || '',
      position: row[17] || '미정',
      games: row[2] || 0,
      wins: row[3] || 0,
      draws: row[4] || 0,
      losses: row[5] || 0,
      goals: row[6] || 0,
      assists: row[7] || 0,
      defenses: row[8] || 0,
      saves: row[9] || 0,
      winRate: row[10] || '0.00%',
      ccp: row[11] || 0,
      points: row[12] || 0,
      attackPoints: row[13] || 0,
      defensePoints: row[14] || 0,
      mp: row[15] || 0,
      mpPerGame: row[16] || 0,
      goalsPerGame: row[2] > 0 ? (row[6] / row[2]).toFixed(2) : '0.00',
      assistsPerGame: row[2] > 0 ? (row[7] / row[2]).toFixed(2) : '0.00'
    }));
    
    return players;
  } catch (error) {
    Logger.log('getLatestGameData 오류: ' + error.toString());
    throw error;
  }
}


function getSummaryStats() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const archiveSheet = ss.getSheetByName('기록실_개인기록');
    
    if (!archiveSheet) {
      throw new Error('기록실_개인기록 시트를 찾을 수 없습니다.');
    }
    
    const data = archiveSheet.getRange(2, 1, archiveSheet.getLastRow() - 1, 10).getValues();
    const players = getDashboardData();
    
    // 실제 총 경기수 계산 (기록실_개인기록에서)
    const totalMatches = Math.floor(data.filter(row => row[0] && row[1]).length / 2);
    
    let totalGoals = 0;
    let maxCCP = 0;
    let mvpName = '';
    
    players.forEach(player => {
      totalGoals += player.goals;
      
      if (player.ccp > maxCCP) {
        maxCCP = player.ccp;
        mvpName = player.name;
      }
    });
    
    return {
      totalMatches: totalMatches,
      totalPlayers: players.length,
      totalGoals: totalGoals,
      mvp: mvpName
    };
  } catch (error) {
    Logger.log('getSummaryStats 오류: ' + error.toString());
    return { error: error.toString() };
  }
}

// 순위표 데이터 가져오기
function getLeaderboardsData() {
  try {
    const players = getDashboardData();
    
    return {
      goals: players.sort((a, b) => b.goals - a.goals).slice(0, 10),
      assists: players.sort((a, b) => b.assists - a.assists).slice(0, 10),
      attack: players.sort((a, b) => b.attackPoints - a.attackPoints).slice(0, 10),
      defenses: players.sort((a, b) => b.defenses - a.defenses).slice(0, 10),
      saves: players.sort((a, b) => b.saves - a.saves).slice(0, 10),
      defensePoints: players.sort((a, b) => b.defensePoints - a.defensePoints).slice(0, 10),
      ccp: players.sort((a, b) => b.ccp - a.ccp).slice(0, 10),
      winrate: players.filter(p => p.games >= 5).sort((a, b) => b.winRate - a.winRate).slice(0, 10),
      points: players.sort((a, b) => b.points - a.points).slice(0, 10)
    };
  } catch (error) {
    Logger.log('getLeaderboardsData 오류: ' + error.toString());
    return { error: error.toString() };
  }
}


// 날짜 기반 분기 계산 함수 (Code.gs 끝부분에 추가)
function getQuarterFromDate(dateString) {
  const date = new Date(dateString);
  const month = date.getMonth() + 1; // 1-12
  
  if (month >= 1 && month <= 3) return 'Q1';
  if (month >= 4 && month <= 6) return 'Q2';
  if (month >= 7 && month <= 9) return 'Q3';
  if (month >= 10 && month <= 12) return 'Q4';
}

// 분기별 CCP 데이터 가져오기 (기존 getCCPByQuarter 함수 교체)
function getCCPByQuarter(quarter) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const archiveSheet = ss.getSheetByName('기록실_개인기록');
    
    if (!archiveSheet) {
      return { error: '기록실_개인기록 시트를 찾을 수 없습니다.' };
    }
    
    const data = archiveSheet.getRange(2, 1, archiveSheet.getLastRow() - 1, 10).getValues();
    const currentYear = new Date().getFullYear();
    
    // 해당 분기 데이터만 필터링
    const quarterData = data.filter(row => {
      if (!row[0]) return false; // 날짜가 없으면 제외
      
      const date = new Date(row[0]);
      if (date.getFullYear() !== currentYear) return false;
      
      return getQuarterFromDate(row[0]) === quarter;
    });
    
    if (quarterData.length === 0) {
      return []; // 빈 배열 반환
    }
    
    // 선수별 CCP 계산 및 정렬
    const playerStats = {};
    quarterData.forEach(row => {
      const playerName = row[1]; // B열: 선수명
      if (!playerStats[playerName]) {
        playerStats[playerName] = { goals: 0, assists: 0, defenses: 0, saves: 0, wins: 0, draws: 0 };
      }
      
      playerStats[playerName].goals += row[3] || 0;    // D열: 득점
      playerStats[playerName].assists += row[4] || 0;  // E열: 도움
      playerStats[playerName].defenses += row[5] || 0; // F열: 수비
      playerStats[playerName].saves += row[6] || 0;    // G열: 선방
      
      // 승무패 계산 (H열: 결과)
      const result = row[7];
      if (result === '승') playerStats[playerName].wins++;
      else if (result === '무') playerStats[playerName].draws++;
    });
    
    // CCP 계산 및 정렬
    const ccpRanking = Object.keys(playerStats).map(name => {
      const stats = playerStats[name];
      const points = stats.wins * 3 + stats.draws * 1;
      const mp = (stats.goals + stats.assists) * 2 + (stats.defenses + stats.saves) * 1;
      const ccp = points + mp;
      
      return { name, ccp };
    }).sort((a, b) => b.ccp - a.ccp).slice(0, 10);
    
    return ccpRanking;
  } catch (error) {
    Logger.log('getCCPByQuarter 오류: ' + error.toString());
    return { error: error.toString() };
  }
}

// 선수 이름 목록 가져오기
function getPlayerNames() {
  try {
    const players = getDashboardData();
    return players.map(player => player.name);
  } catch (error) {
    Logger.log('getPlayerNames 오류: ' + error.toString());
    return [];
  }
}

// 선수 비교 데이터 가져오기
function comparePlayersData(player1, player2, player3) {
  try {
    const players = getDashboardData();
    const selectedPlayers = [player1, player2, player3].filter(name => name);
    
    const results = selectedPlayers.map(name => {
      const player = players.find(p => p.name === name);
      return player || { name: name, error: '선수를 찾을 수 없습니다' };
    });
    
    return results;
  } catch (error) {
    Logger.log('comparePlayersData 오류: ' + error.toString());
    return { error: error.toString() };
  }
}

function testData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('선수별능력치');
  const data = sheet.getRange('A2:T10').getValues();
  Logger.log(data);
  return data;
}

